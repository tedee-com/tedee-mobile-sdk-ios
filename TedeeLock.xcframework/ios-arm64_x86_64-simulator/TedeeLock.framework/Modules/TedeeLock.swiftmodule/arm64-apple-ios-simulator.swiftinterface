// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -package-name tedeelock -enable-experimental-feature StrictConcurrency -module-name TedeeLock
import CoreBluetooth
import Darwin
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@inline(__always) @inlinable internal func bitPadding(to data: inout Swift.Array<Swift.UInt8>, blockSize: Swift.Int, allowance: Swift.Int = 0) {
  let msgLength = data.count
  // Step 1. Append Padding Bits
  // append one bit (UInt8 with one bit) to message
  data.append(0x80)

  // Step 2. append "0" bit until message length in bits â‰¡ 448 (mod 512)
  let max = blockSize - allowance // 448, 986
  if msgLength % blockSize < max { // 448
    data += Array<UInt8>(repeating: 0, count: max - 1 - (msgLength % blockSize))
  } else {
    data += Array<UInt8>(repeating: 0, count: blockSize + max - 1 - (msgLength % blockSize))
  }
}
public struct TedeeAddLock : Swift.Encodable {
  public let serialNumber: Swift.String
  public var name: Swift.String
  public let revision: Swift.Int
  public let softwareVersions: [TedeeLock.TedeeAddLock.TedeeSoftwareVersion]
  public let deviceSettings: TedeeLock.TedeeAddLock.TedeeDeviceSettings
  public let signature: Swift.String
  public var activationCode: Swift.String
  public var organizationId: Swift.Int?
  public var timeZone: Swift.String
  public struct TedeeSoftwareVersion : Swift.Encodable {
    public let softwareType: Swift.Int
    public let version: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public struct TedeeDeviceSettings : Swift.Encodable {
    public let autoLockEnabled: Swift.Bool
    public let autoLockDelay: Swift.Int
    public let autoLockImplicitEnabled: Swift.Bool
    public let autoLockImplicitDelay: Swift.Int
    public let pullSpringEnabled: Swift.Bool
    public let pullSpringDuration: Swift.Int
    public let autoPullSpringEnabled: Swift.Bool
    public let postponedLockEnabled: Swift.Bool
    public let postponedLockDelay: Swift.Int
    public let buttonLockEnabled: Swift.Bool
    public let buttonUnlockEnabled: Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct TedeeCertificate : Swift.Sendable {
  public let certificate: Swift.String
  public let expirationDate: Foundation.Date
  public let devicePublicKey: Swift.String
  public let mobilePublicKey: Swift.String
  public init(certificate: Swift.String, expirationDate: Foundation.Date, devicePublicKey: Swift.String, mobilePublicKey: Swift.String) throws
}
extension TedeeLock.TedeeCertificate {
  public enum Errors : Swift.Error {
    case expired
    case invalidDevicePublicKey
    case invalidMobilePublicKey
    public static func == (a: TedeeLock.TedeeCertificate.Errors, b: TedeeLock.TedeeCertificate.Errors) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct TedeeConnectionStatus {
  public let serialNumber: TedeeLock.TedeeSerialNumber
  public let status: TedeeLock.TedeeConnectionStatus.Status
  public let error: (any Swift.Error)?
  public enum Status {
    case connected
    case connecting
    case disconnected
    public static func == (a: TedeeLock.TedeeConnectionStatus.Status, b: TedeeLock.TedeeConnectionStatus.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum TedeeLockOperationParameters : Swift.UInt8 {
  case none
  case auto
  case force
  case withoutPull
  case unlockOrPull
  case autoAlwaysPull
  case autoNeverPull
  case autoWhenLockedThenPull
  case autoWhenUnlockedThenPull
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public enum TedeeLockOperationResult : Swift.UInt8 {
  case success
  case invalidParameter
  case error
  case busy
  case notCalibrated
  case unlockAlreadyCalledByAutounlock
  case unlockAlreadyCalledByOtherOperation
  case noPermission
  case notConfigured
  case dismounted
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
public struct TedeeLockState {
  public let state: TedeeLock.TedeeLockState.State
  public let stateStatus: TedeeLock.TedeeLockState.Status
  public enum State {
    case uncalibrated
    case calibration
    case unlocked
    case partiallyUnlocked
    case unlocking
    case locking
    case locked
    case pullSpring
    case pulling
    case unknown
    public static func == (a: TedeeLock.TedeeLockState.State, b: TedeeLock.TedeeLockState.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Status {
    case ok
    case jammed
    public static func == (a: TedeeLock.TedeeLockState.Status, b: TedeeLock.TedeeLockState.Status) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct TedeeNotification {
  public let serialNumber: TedeeLock.TedeeSerialNumber
  public let notification: TedeeLock.TedeeNotification.Notification
  public enum Notification {
    case lockState(TedeeLock.TedeeLockState)
    case generic([Swift.UInt8])
  }
}
public struct TedeeRegisterLock {
  public let revision: Swift.Int
  public let targetDeviceRevision: Swift.Int
  public let id: Swift.Int
  public let authPublicKey: Swift.String
  public init(revision: Swift.Int, targetDeviceRevision: Swift.Int, id: Swift.Int, authPublicKey: Swift.String)
}
public struct TedeeSerialNumber : Swift.Sendable {
  public let serialNumber: Swift.String
  public init(serialNumber: Swift.String) throws
}
extension TedeeLock.TedeeSerialNumber {
  public enum Errors : Swift.Error {
    case invalidFormat
    case invalidDeviceType
    public static func == (a: TedeeLock.TedeeSerialNumber.Errors, b: TedeeLock.TedeeSerialNumber.Errors) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
#if compiler(>=5.3) && $Actors
extension TedeeLock.TedeeLockManager {
  #if compiler(>=5.3) && $AsyncAwait
  final public func connect(_ serialNumber: TedeeLock.TedeeSerialNumber, certificate: TedeeLock.TedeeCertificate, keepConnection: Swift.Bool = false) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func sendCommand(_ serialNumber: TedeeLock.TedeeSerialNumber, command: Swift.UInt8, parameters: [Swift.UInt8] = []) async throws -> (Swift.UInt8, [Swift.UInt8]?)
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func getLockState(_ serialNumber: TedeeLock.TedeeSerialNumber) async throws -> TedeeLock.TedeeLockState
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func openLock(_ serialNumber: TedeeLock.TedeeSerialNumber, parameter: TedeeLock.TedeeLockOperationParameters = .none) async throws -> TedeeLock.TedeeLockOperationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func closeLock(_ serialNumber: TedeeLock.TedeeSerialNumber, parameter: TedeeLock.TedeeLockOperationParameters = .none) async throws -> TedeeLock.TedeeLockOperationResult
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func pullLock(_ serialNumber: TedeeLock.TedeeSerialNumber) async throws -> TedeeLock.TedeeLockOperationResult
  #endif
}
#endif
#if compiler(>=5.3) && $Actors
extension TedeeLock.TedeeLockManager {
  #if compiler(>=5.3) && $AsyncAwait
  final public func unsecureConnect(_ serialNumber: TedeeLock.TedeeSerialNumber) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func getAddLockData(_ serialNumber: TedeeLock.TedeeSerialNumber) async throws -> TedeeLock.TedeeAddLock
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func registerLock(_ serialNumber: TedeeLock.TedeeSerialNumber, registration: TedeeLock.TedeeRegisterLock) async throws
  #endif
}
#endif
#if compiler(>=5.3) && $Actors
@_hasMissingDesignatedInitializers final public actor TedeeLockManager {
  public static let shared: TedeeLock.TedeeLockManager
  final public func setSignedDateTimeProvider(_ provider: (any TedeeLock.TedeeSignedDateTimeProvider)?)
  public static var publicKey: Swift.String {
    get
  }
  final public var connectionStatusStream: _Concurrency.AsyncStream<TedeeLock.TedeeConnectionStatus> {
    get
    set
  }
  final public var notificationsStream: _Concurrency.AsyncStream<(TedeeLock.TedeeNotification)> {
    get
    set
  }
  #if compiler(>=5.3) && $AsyncAwait
  final public func isConnected(_ serialNumber: TedeeLock.TedeeSerialNumber) async -> Swift.Bool
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  final public func disconnect(_ serialNumber: TedeeLock.TedeeSerialNumber) async throws
  #endif
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
#endif
#if compiler(>=5.3) && $Actors
extension TedeeLock.TedeeLockManager {
  public enum Errors : Swift.Error {
    case notFound
    case systemPermissions
    case deviceNotInitialized
    case invalidCertificate
    case secureSessionFailed
    case noPermission
    case notConnected
    case alreadyConnecting
    case alreadyConnected
    case alreadyRegistered
    case cantSendCommand
    case cantParseResponse
    case waitingForResponse
    case disconnected
    case missingSignedDateTime
    case signedDateTimeProvider(any Swift.Error)
    case invalidResponse
    case invalidParameters
  }
}
#endif
public struct TedeeSignedDateTime : Swift.Sendable {
  public let datetime: Swift.String
  public let signature: Swift.String
  public init(datetime: Swift.String, signature: Swift.String)
}
public protocol TedeeSignedDateTimeProvider : Swift.Sendable {
  #if compiler(>=5.3) && $AsyncAwait
  func dateTime(for serialNumber: TedeeLock.TedeeSerialNumber) async throws -> TedeeLock.TedeeSignedDateTime
  #endif
}
extension TedeeLock.TedeeCertificate.Errors : Swift.Equatable {}
extension TedeeLock.TedeeCertificate.Errors : Swift.Hashable {}
extension TedeeLock.TedeeConnectionStatus.Status : Swift.Equatable {}
extension TedeeLock.TedeeConnectionStatus.Status : Swift.Hashable {}
extension TedeeLock.TedeeLockOperationParameters : Swift.Equatable {}
extension TedeeLock.TedeeLockOperationParameters : Swift.Hashable {}
extension TedeeLock.TedeeLockOperationParameters : Swift.RawRepresentable {}
extension TedeeLock.TedeeLockOperationResult : Swift.Equatable {}
extension TedeeLock.TedeeLockOperationResult : Swift.Hashable {}
extension TedeeLock.TedeeLockOperationResult : Swift.RawRepresentable {}
extension TedeeLock.TedeeLockState.State : Swift.Equatable {}
extension TedeeLock.TedeeLockState.State : Swift.Hashable {}
extension TedeeLock.TedeeLockState.Status : Swift.Equatable {}
extension TedeeLock.TedeeLockState.Status : Swift.Hashable {}
extension TedeeLock.TedeeSerialNumber.Errors : Swift.Equatable {}
extension TedeeLock.TedeeSerialNumber.Errors : Swift.Hashable {}
